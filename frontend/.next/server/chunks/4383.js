"use strict";exports.id=4383,exports.ids=[4383],exports.modules={4383:(e,r,t)=>{t.d(r,{Od:()=>addStatusUpdate,ZP:()=>a,im:()=>getPropertyRequests});let o="bigdealegypt.up.railway.app/api",getPropertyRequests=async(e,r={})=>{try{let t=new URLSearchParams;Object.entries(r).forEach(([e,r])=>{null!=r&&t.append(e,r.toString())}),t.has("viewAll")||"customer"===r.role?t.has("viewAll")||t.append("viewAll","false"):t.append("viewAll","true"),t.append("_t",Date.now());let a=await fetch(`${o}/property-requests?${t.toString()}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json","Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache"}});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to fetch property requests")}return await a.json()}catch(e){throw console.error("Get property requests error:",e),e}},getPropertyRequestById=async(e,r)=>{try{if(!r)throw Error("Request ID is required");let t=await fetch(`${o}/property-requests/${r}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to fetch property request")}return await t.json()}catch(e){throw console.error("Get property request error:",e),e}},createPropertyRequest=async(e,r)=>{try{let t=await fetch(`${o}/property-requests`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to create property request")}return await t.json()}catch(e){throw console.error("Create property request error:",e),e}},updatePropertyRequest=async(e,r,t)=>{try{if(!r)throw Error("Request ID is required");let a=await fetch(`${o}/property-requests/${r}`,{method:"PUT",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(t)});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to update property request")}return await a.json()}catch(e){throw console.error("Update property request error:",e),e}},deletePropertyRequest=async(e,r)=>{try{if(!r)throw Error("Request ID is required");let t=await fetch(`${o}/property-requests/${r}`,{method:"DELETE",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to delete property request")}return await t.json()}catch(e){throw console.error("Delete property request error:",e),e}},getPropertyRequestFields=async e=>{try{let r=Date.now(),t=await fetch(`${o}/property-requests/fields?_t=${r}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json","Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache"}});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to fetch property request fields")}return await t.json()}catch(e){throw console.error("Get property request fields error:",e),e}},assignPropertyRequest=async(e,r,t,a="")=>{try{if(!r)throw Error("Request ID is required");if(!t)throw Error("Sales operator ID is required");let s=await fetch(`${o}/property-requests/${r}/assign`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({salesOpId:t,notes:a})});if(!s.ok){let e=await s.json();throw Error(e.error?.message||"Failed to assign property request")}return await s.json()}catch(e){throw console.error("Assign property request error:",e),e}},addStatusUpdate=async(e,r,t)=>{try{if(!r)throw Error("Request ID is required");if(!t.status)throw Error("Status is required");let a=await fetch(`${o}/property-requests/${r}/status`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(t)});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to update property request status")}return await a.json()}catch(e){throw console.error("Add status update error:",e),e}},a={getPropertyRequests,getPropertyRequestById,createPropertyRequest,updatePropertyRequest,deletePropertyRequest,getPropertyRequestFields,assignPropertyRequest,addStatusUpdate}}};