"use strict";exports.id=8753,exports.ids=[8753],exports.modules={8753:(e,r,t)=>{t.d(r,{Hf:()=>getPropertyRequestById,ZP:()=>a});let o="bigdealegypt.up.railway.app/api",getDashboardData=async e=>{try{let r=await fetch(`${o}/sales-ops/dashboard`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!r.ok){let e=await r.json();throw Error(e.error?.message||"Failed to fetch dashboard data")}return await r.json()}catch(e){throw console.error("Get dashboard data error:",e),e}},getProperties=async(e,r={})=>{try{let t=new URLSearchParams;for(let[e,o]of Object.entries(r))null!=o&&""!==o&&t.append(e,o.toString());let a=await fetch(`${o}/sales-ops/properties?${t.toString()}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to fetch properties")}return await a.json()}catch(e){throw console.error("Get properties error:",e),e}},togglePropertyAvailability=async(e,r,t)=>{try{let a=await fetch(`${o}/sales-ops/properties/${r}/toggle-availability`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({currentStatus:t})});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to toggle property availability")}return await a.json()}catch(e){throw console.error("Toggle property availability error:",e),e}},createProperty=async(e,r)=>{try{let t=await fetch(`${o}/sales-ops/properties`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to create property")}return await t.json()}catch(e){throw console.error("Create property error:",e),e}},deleteProperty=async(e,r)=>{try{let t=await fetch(`${o}/sales-ops/properties/${r}`,{method:"DELETE",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to delete property")}return await t.json()}catch(e){throw console.error("Delete property error:",e),e}},getPropertyRequests=async(e,r={})=>{try{let t=new URLSearchParams;for(let[e,o]of Object.entries(r))null!=o&&""!==o&&t.append(e,o.toString());let a=await fetch(`${o}/sales-ops/property-requests?${t.toString()}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to fetch property requests")}return await a.json()}catch(e){throw console.error("Get property requests error:",e),e}},getPropertyRequestById=async(e,r)=>{try{let t=await fetch(`${o}/sales-ops/property-requests/${r}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to fetch property request")}return await t.json()}catch(e){throw console.error("Get property request error:",e),e}},updatePropertyRequestStatus=async(e,r,t)=>{try{let a=await fetch(`${o}/sales-ops/property-requests/${r}/status`,{method:"PUT",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({status:t})});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to update property request status")}return await a.json()}catch(e){throw console.error("Update property request status error:",e),e}},getScheduledViewings=async(e,r={})=>{try{let t=new URLSearchParams;for(let[e,o]of Object.entries(r))null!=o&&""!==o&&t.append(e,o.toString());let a=await fetch(`${o}/sales-ops/scheduled-viewings?${t.toString()}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to fetch scheduled viewings")}return await a.json()}catch(e){throw console.error("Get scheduled viewings error:",e),e}},getScheduledViewingById=async(e,r)=>{try{let t=await fetch(`${o}/sales-ops/scheduled-viewings/${r}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to fetch scheduled viewing")}return await t.json()}catch(e){throw console.error("Get scheduled viewing error:",e),e}},a={getDashboardData,getProperties,createProperty,togglePropertyAvailability,deleteProperty,getPropertyRequests,getPropertyRequestById,updatePropertyRequestStatus,getScheduledViewings,getScheduledViewingById}}};