"use strict";exports.id=2308,exports.ids=[2308],exports.modules={2308:(e,r,t)=>{t.d(r,{G:()=>cancelScheduledViewing,G9:()=>confirmScheduledViewing,Jt:()=>completeScheduledViewing,U4:()=>getScheduledViewings,ZP:()=>o,pz:()=>updateScheduledViewing});let i="bigdealegypt.up.railway.app/api",getScheduledViewings=async(e,r={})=>{try{let t=new URLSearchParams;for(let[e,i]of Object.entries(r))null!=i&&(Array.isArray(i)?t.append(e,i.join(",")):t.append(e,i.toString()));t.has("viewAll")||"customer"===r.role?t.has("viewAll")||t.append("viewAll","false"):t.append("viewAll","true"),t.append("_t",Date.now());let o=await fetch(`${i}/scheduled-viewings?${t.toString()}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json","Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache"}});if(!o.ok){let e=await o.json();throw Error(e.error?.message||"Failed to fetch scheduled viewings")}return await o.json()}catch(e){throw console.error("Get scheduled viewings error:",e),e}},getScheduledViewingById=async(e,r)=>{try{let t=await fetch(`${i}/scheduled-viewings/${r}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},credentials:"include"});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to fetch scheduled viewing")}return await t.json()}catch(e){throw console.error("Get scheduled viewing by ID error:",e),e}},createScheduledViewing=async(e,r)=>{try{let t=await fetch(`${i}/scheduled-viewings`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(r),credentials:"include"});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to create scheduled viewing")}return await t.json()}catch(e){throw console.error("Create scheduled viewing error:",e),e}},updateScheduledViewing=async(e,r,t)=>{try{let o=await fetch(`${i}/scheduled-viewings/${r}`,{method:"PUT",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"});if(!o.ok){let e=await o.json();throw Error(e.error?.message||"Failed to update scheduled viewing")}return await o.json()}catch(e){throw console.error("Update scheduled viewing error:",e),e}},deleteScheduledViewing=async(e,r)=>{try{let t=await fetch(`${i}/scheduled-viewings/${r}`,{method:"DELETE",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},credentials:"include"});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to delete scheduled viewing")}return await t.json()}catch(e){throw console.error("Delete scheduled viewing error:",e),e}},cancelScheduledViewing=async(e,r,t={})=>{try{let o=await fetch(`${i}/scheduled-viewings/${r}/cancel`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"});if(!o.ok){let e=await o.json();throw Error(e.error?.message||"Failed to cancel scheduled viewing")}return await o.json()}catch(e){throw console.error("Cancel scheduled viewing error:",e),e}},confirmScheduledViewing=async(e,r,t)=>{try{let o=await fetch(`${i}/scheduled-viewings/${r}/confirm`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"});if(!o.ok){let e=await o.json();throw Error(e.error?.message||"Failed to confirm scheduled viewing")}return await o.json()}catch(e){throw console.error("Confirm scheduled viewing error:",e),e}},completeScheduledViewing=async(e,r,t={})=>{try{let o=await fetch(`${i}/scheduled-viewings/${r}/complete`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"});if(!o.ok){let e=await o.json();throw Error(e.error?.message||"Failed to complete scheduled viewing")}return await o.json()}catch(e){throw console.error("Complete scheduled viewing error:",e),e}},proposeViewingSlots=async(e,r,t)=>{try{let o=await fetch(`${i}/scheduled-viewings/${r}/propose-slots`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"});if(!o.ok){let e=await o.json();throw Error(e.error?.message||"Failed to propose viewing slots")}return await o.json()}catch(e){throw console.error("Propose viewing slots error:",e),e}},selectViewingSlot=async(e,r,t)=>{try{let o=await fetch(`${i}/scheduled-viewings/${r}/select-slot`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"});if(!o.ok){let e=await o.json();throw Error(e.error?.message||"Failed to select viewing slot")}return await o.json()}catch(e){throw console.error("Select viewing slot error:",e),e}},o={getScheduledViewings,getScheduledViewingById,createScheduledViewing,updateScheduledViewing,deleteScheduledViewing,cancelScheduledViewing,confirmScheduledViewing,completeScheduledViewing,proposeViewingSlots,selectViewingSlot}}};