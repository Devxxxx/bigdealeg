"use strict";exports.id=5189,exports.ids=[5189],exports.modules={5189:(e,r,t)=>{t.d(r,{GA:()=>getUserById,Gw:()=>getSettings,HG:()=>deleteFormField,Rf:()=>getUsers,Sl:()=>resetSettings,VC:()=>toggleUserStatus,VP:()=>updateSettings,WP:()=>createFormField,ZS:()=>getDashboardData,bs:()=>toggleFieldRequired,c7:()=>updateUserRole,h8:()=>deleteUser,kN:()=>updateFormField,ow:()=>updateFieldOrder,s4:()=>getFormFields});let o="bigdealegypt.up.railway.app/api",getDashboardData=async e=>{try{let r=await fetch(`${o}/admin/dashboard`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!r.ok){let e=await r.json();throw Error(e.error?.message||"Failed to fetch dashboard data")}return await r.json()}catch(e){throw console.error("Get dashboard data error:",e),e}},getUsers=async(e,r={})=>{try{let t=new URLSearchParams;for(let[e,o]of Object.entries(r))null!=o&&""!==o&&t.append(e,o.toString());let a=await fetch(`${o}/admin/users?${t.toString()}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to fetch users")}return await a.json()}catch(e){throw console.error("Get users error:",e),e}},getUserById=async(e,r)=>{try{let t=await fetch(`${o}/admin/users/${r}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to fetch user details")}return await t.json()}catch(e){throw console.error("Get user details error:",e),e}},updateUserRole=async(e,r,t)=>{try{let a=await fetch(`${o}/admin/users/${r}/role`,{method:"PUT",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({role:t})});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to update user role")}return await a.json()}catch(e){throw console.error("Update user role error:",e),e}},toggleUserStatus=async(e,r,t)=>{try{let a=await fetch(`${o}/admin/users/${r}/status`,{method:"PUT",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({is_active:t})});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to update user status")}return await a.json()}catch(e){throw console.error("Toggle user status error:",e),e}},deleteUser=async(e,r)=>{try{let t=await fetch(`${o}/admin/users/${r}`,{method:"DELETE",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to delete user")}return await t.json()}catch(e){throw console.error("Delete user error:",e),e}},getFormFields=async e=>{try{let r=await fetch(`${o}/admin/form-fields`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!r.ok){let e=await r.json();throw Error(e.error?.message||"Failed to fetch form fields")}let t=await r.json();return t.fields||[]}catch(e){throw console.error("Get form fields error:",e),e}},createFormField=async(e,r)=>{try{let t=await fetch(`${o}/admin/form-fields`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to create form field")}let a=await t.json();return a.field}catch(e){throw console.error("Create form field error:",e),e}},updateFormField=async(e,r,t)=>{try{let a=await fetch(`${o}/admin/form-fields/${r}`,{method:"PUT",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(t)});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to update form field")}let s=await a.json();return s.field}catch(e){throw console.error("Update form field error:",e),e}},deleteFormField=async(e,r)=>{try{let t=await fetch(`${o}/admin/form-fields/${r}`,{method:"DELETE",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to delete form field")}return await t.json()}catch(e){throw console.error("Delete form field error:",e),e}},toggleFieldRequired=async(e,r,t)=>{try{let a=await fetch(`${o}/admin/form-fields/${r}/required`,{method:"PUT",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({required:t})});if(!a.ok){let e=await a.json();throw Error(e.error?.message||"Failed to toggle field required status")}let s=await a.json();return s.field}catch(e){throw console.error("Toggle field required error:",e),e}},updateFieldOrder=async(e,r,t,a)=>{try{let s=parseInt(t,10),i=parseInt(a,10);if(isNaN(s)||isNaN(i))throw Error("Invalid order values");let n=await fetch(`${o}/admin/form-fields/${r}/order`,{method:"PUT",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({order:s,targetOrder:i})});if(!n.ok){let e=await n.json();throw Error(e.error?.message||"Failed to update field order")}return await n.json()}catch(e){throw console.error("Update field order error:",e),e}},getSettings=async e=>{try{let r=await fetch(`${o}/admin/settings`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!r.ok){let e=await r.json();throw Error(e.error?.message||"Failed to fetch settings")}let t=await r.json();return t.settings}catch(e){throw console.error("Get settings error:",e),e}},updateSettings=async(e,r)=>{try{let t=await fetch(`${o}/admin/settings`,{method:"PUT",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok){let e=await t.json();throw Error(e.error?.message||"Failed to update settings")}let a=await t.json();return a.settings}catch(e){throw console.error("Update settings error:",e),e}},resetSettings=async e=>{try{let r=await fetch(`${o}/admin/settings/reset`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!r.ok){let e=await r.json();throw Error(e.error?.message||"Failed to reset settings")}let t=await r.json();return t.settings}catch(e){throw console.error("Reset settings error:",e),e}}}};